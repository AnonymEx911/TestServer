"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_service_1 = require("./services/api.service");
class RageMP {
    constructor(options) {
        this.options = options;
    }
    getServers() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const servers = api_service_1.ApiService.getAllServers(this.options);
                return servers; // promise
            }
            catch (error) {
                throw error;
            }
        });
    }
    getSingleServer(ip) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const servers = yield this.getServers();
                return servers.find(server => server.ip === ip);
            }
            catch (error) {
                throw error;
            }
        });
    }
    getServersByGamemode(gamemode) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const servers = yield this.getServers();
                return servers.filter(server => server.gamemode == gamemode);
            }
            catch (error) {
                throw error;
            }
        });
    }
    getServersByLang(lang) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const servers = yield this.getServers();
                return servers.filter(server => server.lang == lang);
            }
            catch (error) {
                throw error;
            }
        });
    }
}
exports.default = RageMP;
//# sourceMappingURL=index.js.map